# app/handlers.py
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
import app.database.requests as rq
from datetime import datetime, timedelta
import asyncio
import app.keyboards as kb

router = Router()

class RegistrationStates(StatesGroup):
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_weight = State()
    waiting_for_diseases = State()
    confirm_data = State()

gender_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ú—É–∂—Å–∫–æ–π'), KeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–π')]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

diseases_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞')],
        [KeyboardButton(text='–ê–ø–Ω–æ—ç')],
        [KeyboardButton(text='–•—Ä–∞–ø')],
        [KeyboardButton(text='–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º')]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

async def check_registration(message: Message) -> bool:
    user = await rq.get_user(message.from_user.id)
    return user and user.is_registered if user else False

@router.message(CommandStart())
async def cmd_start(message: Message):
    if not await check_registration(message):
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞! –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text='–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')]],
                resize_keyboard=True
            )
        )
    else:
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=kb.main
        )

@router.message(F.text == '–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
async def start_registration(message: Message, state: FSMContext):
    await state.set_state(RegistrationStates.waiting_for_gender)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=gender_keyboard
    )

@router.message(RegistrationStates.waiting_for_gender)
async def process_gender(message: Message, state: FSMContext):
    if message.text not in ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return
    
    await state.update_data(gender='M' if message.text == '–ú—É–∂—Å–∫–æ–π' else 'F')
    await state.set_state(RegistrationStates.waiting_for_age)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(RegistrationStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit() or not (1 <= int(message.text) <= 120):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1-120)")
        return
    
    await state.update_data(age=int(message.text))
    await state.set_state(RegistrationStates.waiting_for_weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ (30-200):")

@router.message(RegistrationStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    if not message.text.isdigit() or not (30 <= int(message.text) <= 200):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-200 –∫–≥)")
        return
    
    await state.update_data(weight=int(message.text))
    await state.set_state(RegistrationStates.waiting_for_diseases)
    await message.answer(
        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º?",
        reply_markup=diseases_keyboard
    )

@router.message(RegistrationStates.waiting_for_diseases)
async def process_diseases(message: Message, state: FSMContext):
    if message.text not in ['–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞', '–ê–ø–Ω–æ—ç', '–•—Ä–∞–ø', '–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return
    
    user_data = await state.get_data()
    await state.update_data(diseases=message.text)
    
    sleep_hours = 7
    if user_data['weight'] < 60:
        sleep_hours = 8
    elif user_data['weight'] > 90:
        sleep_hours = 9
    
    if user_data['gender'] == 'F':
        sleep_hours += 0.5
    
    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"‚ñ™ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user_data['gender'] == 'M' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"‚ñ™ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
        f"‚ñ™ –í–µ—Å: {user_data['weight']} –∫–≥\n"
        f"‚ñ™ –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º: {message.text}\n"
        f"‚ñ™ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞: {sleep_hours} —á–∞—Å–æ–≤\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text='–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ')],
                [KeyboardButton(text='–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(RegistrationStates.confirm_data)

@router.message(RegistrationStates.confirm_data)
async def confirm_data(message: Message, state: FSMContext):
    if message.text == '–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ':
        await state.clear()
        await start_registration(message, state)
        return
    
    user_data = await state.get_data()
    
    await rq.create_or_update_user(
        tg_id=message.from_user.id,
        gender=user_data['gender'],
        age=user_data['age'],
        weight=user_data['weight'],
        diseases=user_data['diseases']
    )
    
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        reply_markup=kb.main
    )
    await state.clear()

@router.message(F.text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º')
async def contact_admin(message: Message):
    if not await check_registration(message):
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        return
    
    await message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
        "Telegram: @yougogi\n"  
        "Email: georgasss0@gmail.com",         
        reply_markup=kb.main
    )
    
@router.message(F.text == '–í–∏–¥–µ–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞')
async def show_sleep_videos(message: Message):
    if not await check_registration(message):
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        return

    categories = await rq.get_sleep_categories()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for category in categories:
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=category.name, callback_data=f"category_{category.id}")]
        )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("category_"))
async def show_category_content(callback: CallbackQuery):
    category_id = int(callback.data.split("_")[1])
    contents = await rq.get_sleep_content(category_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for content in contents:
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=content.name, callback_data=f"content_{content.id}")]
        )
    
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("content_"))
async def show_content_details(callback: CallbackQuery):
    content_id = int(callback.data.split("_")[1])
    content = await rq.get_content(content_id)
    
    if content:
        await callback.message.answer(
            f"üì∫ {content.name}\n"
            f"üìù {content.description}\n"
            f"üé• –°—Å—ã–ª–∫–∞: {content.video_link}"
        )
    else:
        await callback.message.answer("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await callback.answer()

@router.message(F.text == '–í–∏–¥—ã —Å–Ω–∞')
async def show_sleep_types(message: Message):
    if not await check_registration(message):
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω', callback_data='sleep_healthy')],
        [InlineKeyboardButton(text='–û—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–Ω—ã', callback_data='sleep_lucid')],
        [InlineKeyboardButton(text='–ë–∏—Ñ–∞–∑–Ω—ã–π —Å–æ–Ω', callback_data='sleep_biphasic')],
        [InlineKeyboardButton(text='–ü–æ–ª–∏—Ñ–∞–∑–Ω—ã–π —Å–æ–Ω', callback_data='sleep_polyphasic')],
        [InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–Ω—ã', callback_data='sleep_recurring')]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–Ω–∞:", reply_markup=keyboard)

@router.callback_query(F.data.startswith('sleep_'))
async def send_sleep_info(callback: CallbackQuery):
    sleep_type = callback.data.split('_')[1]
    info = ""
    
    if sleep_type == 'healthy':
        info = "–ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω ‚Äî —ç—Ç–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üí§ –ß—Ç–æ–±—ã –µ–≥–æ –¥–æ—Å—Ç–∏—á—å, –≤–∞–∂–Ω–æ –ª–æ–∂–∏—Ç—å—Å—è –∏ –≤—Å—Ç–∞–≤–∞—Ç—å –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è ‚è∞ –ó–∞ —á–∞—Å –¥–æ —Å–Ω–∞ –ª—É—á—à–µ —É–±—Ä–∞—Ç—å –≥–∞–¥–∂–µ—Ç—ã üì±, –∞ –≤ –∫–æ–º–Ω–∞—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–∏—à–∏–Ω—É, —Ç–µ–º–Ω–æ—Ç—É –∏ –ø—Ä–æ—Ö–ª–∞–¥—É üåô –ù–µ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–µ–¥–∞—Ç—å –Ω–∞ –Ω–æ—á—å –∏ –ø–∏—Ç—å –∫–æ—Ñ–µ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è ‚òïÔ∏è –õ—ë–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è —É–ª—É—á—à–∏—Ç —Å–æ–Ω, –∞ –≤–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã ‚Äî —á—Ç–µ–Ω–∏–µ, –¥—É—à –∏–ª–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è ‚Äî –ø–æ–º–æ–≥—É—Ç —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –ª–µ–≥—á–µ –∑–∞—Å–Ω—É—Ç—å üõÅüìñ"
    elif sleep_type == 'lucid':
        info = "–û—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–Ω—ã ‚Äî —ç—Ç–æ —Å–Ω—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —á–µ–ª–æ–≤–µ–∫ –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ —Å–ø–∏—Ç, –∏ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è–º–∏ üß†‚ú® –û–Ω–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ–º–æ–≥–∞—é—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ. –ß—Ç–æ–±—ã –∏—Ö –¥–æ—Å—Ç–∏—á—å, –¥–µ–ª–∞–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–Ω—ë–º (—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Ä—É–∫–∏, —á–∏—Ç–∞–π —Ç–µ–∫—Å—Ç –¥–≤–∞–∂–¥—ã) üñêÔ∏èüìñ, –≤–µ–¥–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π ‚úçÔ∏è, –ø–æ–≤—Ç–æ—Ä—è–π –ø–µ—Ä–µ–¥ —Å–Ω–æ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É: ¬´–Ø –ø–æ–π–º—É, —á—Ç–æ —Å–ø–ª—é¬ª üåô –∏ –ø—Ä–æ–±—É–π —Ç–µ—Ö–Ω–∏–∫—É WBTB ‚Äî –ø—Ä–æ—Å–Ω–∏—Å—å –∑–∞ 5‚Äì6 —á–∞—Å–æ–≤ –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–±—É–¥—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–¥—Ä—Å—Ç–≤—É—é—â–∏–º –∏ —Å–Ω–æ–≤–∞ –ª–æ–∂–∏—Å—å üõèÔ∏è –ì–ª–∞–≤–Ω–æ–µ ‚Äî –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏ —Ç–µ—Ä–ø–µ–Ω–∏–µ üåå"
    elif sleep_type == 'biphasic':
        info = "–ë–∏—Ñ–∞–∑–Ω—ã–π —Å–æ–Ω ‚Äî —ç—Ç–æ —Ä–µ–∂–∏–º, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —á–µ–ª–æ–≤–µ–∫ —Å–ø–∏—Ç –¥–≤–∞–∂–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ üí§ –¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –±–æ–¥—Ä–µ–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ, –µ—Å–ª–∏ —Å–æ–±–ª—é–¥–∞—Ç—å —á—ë—Ç–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –û–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ–Ω —Å 00:00 –¥–æ 04:30 –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –¥–Ω–µ–≤–Ω–æ–π —Å 13:30 –¥–æ 15:00 ‚è∞ –í —Å—É–º–º–µ —ç—Ç–æ –æ–∫–æ–ª–æ 6 —á–∞—Å–æ–≤ —Å–Ω–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –Ω–∞ –¥–≤–∞ —ç—Ç–∞–ø–∞. –¢–∞–∫–æ–π —Ä–µ–∂–∏–º —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–≤—ã–∫–∞–Ω–∏—è –∏ –Ω–µ –≤—Å–µ–º –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ—ç—Ç–æ–º—É –≤–∞–∂–Ω–æ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—Ç—å—Å—è –∫ —Å–≤–æ–µ–º—É —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å."
    elif sleep_type == 'polyphasic':
        info = "–ü–æ–ª–∏—Ñ–∞–∑–Ω—ã–π —Å–æ–Ω ‚Äî —ç—Ç–æ —Ä–µ–∂–∏–º, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —á–µ–ª–æ–≤–µ–∫ —Å–ø–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–Ω–∞ üí§ –¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –º–æ–∂–µ—Ç –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–æ–¥—Ä—Å—Ç–≤–æ–≤–∞–Ω–∏—è ‚è∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–≥–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–∂–∏–º—ã: Everyman ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ–Ω 3 —á–∞—Å–∞ –Ω–æ—á—å—é üåô + 3 –∫–æ—Ä–æ—Ç–∫–∏–µ –¥—Ä–µ–º—ã –ø–æ 20 –º–∏–Ω—É—Ç –¥–Ω—ë–º üõèÔ∏è (–≤—Å–µ–≥–æ ~4 —á); Uberman ‚Äî —Ç–æ–ª—å–∫–æ 6 –¥—Ä–µ–º –ø–æ 20 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ üïë (–∏—Ç–æ–≥–æ 2 —á —Å–Ω–∞ –≤ —Å—É—Ç–∫–∏); Dymaxion ‚Äî 4 –¥—Ä–µ–º—ã –ø–æ 30 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ ‚è≥ (–≤—Å–µ–≥–æ 2 —á —Å–Ω–∞); Segmented sleep ‚Äî 2 —Ä–∞–≤–Ω—ã—Ö –æ—Ç—Ä–µ–∑–∫–∞ –ø–æ 3‚Äì4 —á–∞—Å–∞ —Å –ø–µ—Ä–µ—Ä—ã–≤–æ–º –º–µ–∂–¥—É –Ω–∏–º–∏ üïì. –¢–∞–∫–∏–µ —Ä–µ–∂–∏–º—ã —Å—á–∏—Ç–∞—é—Ç—Å—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –∏ –ø–æ–¥—Ö–æ–¥—è—Ç –Ω–µ –≤—Å–µ–º. –í–∞–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º –∏ –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º –∫ –ø–µ—Ä–∏–æ–¥—É –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ üåô."
    elif sleep_type == 'recurring':
        info = "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–Ω—ã ‚Äî —ç—Ç–æ —Å–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Å—Ö–æ–∂–∏–π —Å—é–∂–µ—Ç, –æ–±—Ä–∞–∑—ã –∏–ª–∏ —Ç–µ–º—ã üß†üí≠ –û–Ω–∏ —á–∞—Å—Ç–æ —Å–≤—è–∑–∞–Ω—ã —Å –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏, —Å—Ç—Ä–µ—Å—Å–æ–º –∏–ª–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏. –¢–∞–∫–∏–µ —Å–Ω—ã –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∂–∏–∑–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–ª–∏ –æ—Å–æ–∑–Ω–∞–Ω–∏—è. –ß—Ç–æ–±—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–Ω—ã, –≤–∞–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ –≤—ã–∑—ã–≤–∞—é—Ç, –∞ —Ç–∞–∫–∂–µ –Ω–∞ —Å–∏–º–≤–æ–ª–∏–∫—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–Ω–∞ üåô –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–Ω–∏—Ç—Å—è, —á—Ç–æ –≤—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –±–µ–≥–∞–µ—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –Ω–µ—Ä–µ—à—ë–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ üèÉ‚Äç‚ôÄÔ∏è. –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —Ç–µ–º–∞ –ø–∞–¥–µ–Ω–∏—è, —ç—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —á—É–≤—Å—Ç–≤–æ –ø–æ—Ç–µ—Ä–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏–ª–∏ —Å—Ç—Ä–∞—Ö–∞ –ø–µ—Ä–µ–¥ –Ω–µ—É–¥–∞—á–µ–π üò®. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ —Å–Ω—ã –ø—ã—Ç–∞—é—Ç—Å—è –≤–∞–º —Å–æ–æ–±—â–∏—Ç—å, –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏ –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏."
    
    await callback.message.answer(info)
    await callback.answer()

@router.message(F.text == '–õ–æ–∂—É—Å—å —Å–ø–∞—Ç—å')
async def good_night(message: Message):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        return
    
    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
    sleep_hours = 7
    if user.weight < 60:
        sleep_hours = 8
    elif user.weight > 90:
        sleep_hours = 9
    
    if user.gender == 'F':
        sleep_hours += 0.5
    
    wake_up_time = (datetime.now() + timedelta(hours=sleep_hours)).strftime("%H:%M")
    
    await message.answer(
        f"–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏! üò¥\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞: {sleep_hours} —á–∞—Å–æ–≤\n"
        f"–ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {wake_up_time}\n"
        f"–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!"
    )
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    await asyncio.sleep(sleep_hours * 3600)
    await message.answer("üîî –í—Ä–µ–º—è –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è! –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è")

@router.message(F.text == '–ö–∞–∫–∏–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã')
async def show_commands(message: Message):
    commands = [
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
        "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞ ‚úçÔ∏è",
        "–ö–∞–∫–∏–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã - —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ —è —É–º–µ—é —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å ‚ùì",
        "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        "–í–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞ ‚Äî –ø–æ–º–æ–∂–µ—Ç –∑–∞—Å–Ω—É—Ç—å –±—ã—Å—Ç—Ä–µ–µ –∏ –∫—Ä–µ–ø—á–µ üé•",
        "–í–∏–¥—ã —Å–Ω–∞ ‚Äî —É–∑–Ω–∞–π, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å —Ç–µ–ª–æ–º –∏ –º–æ–∑–≥–æ–º –Ω–æ—á—å—é üåô",
        "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º - –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã üõ†Ô∏è",
        "–õ–æ–∂—É—Å—å —Å–ø–∞—Ç—å - —á—Ç–æ–±—ã —è –ø–æ–∂–µ–ª–∞–ª —Ç–µ–±–µ –¥–æ–±—Ä–æ–π –Ω–æ—á–∏ –∏ –∑–∞–ø–æ–º–Ω–∏–ª –≤—Ä–µ–º—è —Å–Ω–∞ üò¥"
    ]
    await message.answer("\n".join(commands)) 