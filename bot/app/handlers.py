# —Ç–µ–ª–æ –ø—Ä–æ–µ–∫—Ç–∞, —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–ª–¥–∏—Ç –≤—Å—ë —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±—â–µ–Ω–∏–µ–º —Å –±–æ—Ç–æ–º –Ω—É –∫–æ—Ä–æ—á–µ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—é–¥–∞ –ø–æ—Ç —Ç–æ–∫–µ–Ω –∏ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ–∞–π–ª–æ–º –ø—Ä–æ–µ–∫—Ç–∞ XD
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from io import BytesIO
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from data.nutrition import NUTRITION_PLANS
import app.keyboards as kb
import app.database.requests as rq
import os

router = Router()

class RegistrationStates(StatesGroup): #—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    waiting_for_gender = State()
    waiting_for_height = State()
    waiting_for_weight = State()

gender_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ú—É–∂—Å–∫–æ–π'), KeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–π')] #–∫–Ω–æ–ø–∫–∏ –ø–æ–ª–∞
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

async def check_registration(message: Message) -> bool:
    user = await rq.get_user(message.from_user.id)
    return user and user.is_registered if user else False

@router.message(CommandStart()) #–ª–æ–≤–∏–ª —Å—Ç–∞—Ä—Ç
async def cmd_start(message: Message):
    if not await check_registration(message):
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text='–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')]], #–∫–Ω–æ–ø–∫–∞
                resize_keyboard=True
            )
        )
    else:
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=kb.main
        )

@router.message(F.text == '–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é') #–ª–æ–≤–∏–º –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
async def start_registration(message: Message, state: FSMContext):
    await state.set_state(RegistrationStates.waiting_for_gender)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=gender_keyboard
    )

@router.message(RegistrationStates.waiting_for_gender) #–∏—Å–ø–æ–ª—å–∑—É–µ–º RegistrationStates –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (–ø–æ–ª)
async def process_gender(message: Message, state: FSMContext):
    if message.text not in ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return
    
    await state.update_data(gender='M' if message.text == '–ú—É–∂—Å–∫–æ–π' else 'F')
    await state.set_state(RegistrationStates.waiting_for_height)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º (100-250):",
        reply_markup=ReplyKeyboardRemove() 
    )

@router.message(RegistrationStates.waiting_for_height) # –∏—Å–ø–æ–ª—å–∑—É–µ–º RegistrationStates –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (—Ä–æ—Å—Ç)
async def process_height(message: Message, state: FSMContext):
    if not message.text.isdigit() or not (100 <= int(message.text) <= 250):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º)") #–æ—à–∏–±–∫–∞
        return
    
    await state.update_data(height=int(message.text))
    await state.set_state(RegistrationStates.waiting_for_weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ (30-200):")

@router.message(RegistrationStates.waiting_for_weight) #–∏—Å–ø–æ–ª—å–∑—É–µ–º RegistrationStates –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (–≤–µ—Å)
async def process_weight(message: Message, state: FSMContext):
    if not message.text.isdigit() or not (30 <= int(message.text) <= 200):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-200 –∫–≥)") #–æ—à–∏–±–∫–∞
        return
    
    #–í–Ω–æ—Å–∏–º –≤ –±–¥
    user_data = await state.get_data()
    weight = int(message.text)
    
    await rq.create_or_update_user(
        tg_id=message.from_user.id,
        gender=user_data['gender'],
        height=user_data['height'],
        weight=weight
    )
    
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    recommendation = ""
    if weight < 60:
        recommendation = "üèÜ –î–ª—è –≤–∞—Å –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥–æ–π–¥—É—Ç –∫—Ä–æ—Å—Å-—Ñ–∏—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!"
    elif weight > 90:
        recommendation = "üèÜ –í–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–æ–¥–µ –∏ full-body —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!"
    
    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚ñ™ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user_data['gender'] == 'M' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"‚ñ™ –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
        f"‚ñ™ –í–µ—Å: {weight} –∫–≥\n\n"
        f"{recommendation if recommendation else '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!'}",
        reply_markup=kb.main
    )
    await state.clear()

@router.message(F.text == '–ö–∞–∫–∏–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã')
async def show_commands(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        "- –ö–∞–∫–∏–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã\n"
        "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
        "- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏—Ç–∞–Ω–∏—è\n"
        "- –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º"
    )

@router.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫') # –ª–æ–≤–∏–º –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
async def workout_setup(message: Message):
    if not await check_registration(message):
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é") #–æ—à–∏–±–∫–∞
        return
    
    # –≤–∫–ª—é—á–∞–µ–º –∫–ª–∞–≤—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = await rq.get_categories()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for category in categories:
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=category.name, callback_data=f"category_{category.id}")]
        )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)

#–ª–æ–≤–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@router.callback_query(F.data.startswith("category_"))
async def show_category_workouts(callback: CallbackQuery):
    category_id = int(callback.data.split("_")[1])
    workouts = await rq.get_workouts(category_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for workout in workouts:
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=workout.name, callback_data=f"workout_{workout.id}")]
        )
    
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("workout_"))
async def show_workout_details(callback: CallbackQuery):
    workout_id = int(callback.data.split("_")[1])
    workout = await rq.get_workout(workout_id)
    
    if workout:
        await callback.message.answer(
            f"üèãÔ∏è {workout.name}\n"
            f"üìù {workout.description}\n"
            f"üé• –í–∏–¥–µ–æ: {workout.videotraining}"
        )
    else:
        await callback.message.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    await callback.answer()

#–¥–µ–ª–∞–µ–º —Ç–∞–∫ —á—Ç–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω –∏ –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ —Ç–æ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞(–ø–æ–¥–æ–±–Ω–æ–µ –¥–µ–ª–∞–ª–∏ –≤—ã—à–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)
@router.message(F.text.in_(['–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏—Ç–∞–Ω–∏—è', '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º']))
async def require_registration(message: Message):
    if not await check_registration(message):
        await message.answer(
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text='–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')]],
                resize_keyboard=True
            )
        )
        #—ç—Ç–∏ –∫–Ω–æ–ø–∫–∏
    else:
        if message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏—Ç–∞–Ω–∏—è':
            await message.answer("–†–∞–∑–¥–µ–ª –ø–∏—Ç–∞–Ω–∏—è:", reply_markup=kb.nutrition_types)
        elif message.text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º':
            await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞—à–µ–≥–æ –∫–æ–º—é–Ω–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @yougogi")

@router.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏—Ç–∞–Ω–∏—è')
async def nutrition_setup(message: Message):
    if not await check_registration(message):
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–∏—Ç–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è:",
        reply_markup=kb.nutrition_types
    )

@router.callback_query(F.data.startswith('nutrition_'))
async def send_nutrition_info(callback: CallbackQuery):
    plan_type = callback.data.split('_')[1]
    
    if plan_type not in NUTRITION_PLANS:  
        await callback.answer("–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω") #–æ—à–∏–±–∫–∞
        return
    
    plan = NUTRITION_PLANS[plan_type]  
    
    try:
        await callback.message.answer(plan['description'])
        await callback.message.answer(plan['content'])
        await callback.answer()
    except Exception as e:
        print(f"Error: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏") #–æ—à–∏–±–∫–∞
    